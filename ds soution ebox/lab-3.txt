I-LAB
1)
#include<stdio.h>
#include<stdlib.h>
typedef struct Node 
{
    int data;
    struct Node *next ;
    struct Node *previos;
}node;
node * insert(node * start)
{
    node* n=(node*)malloc(sizeof(node));
    printf("Enter the element to be inserted:\n");
    scanf("%d",&n->data);
    n->next=0;
    n->previos=0;
    if(start==0)
    {
        start=n;
    }
    else
    {
        // node *p=start;
        
        n->next=start;
        start->previos=n;
        start=n;
    }
    
    return start;
}
node *insert_left(node* start)
{
    if(start==0)
    {
        printf("Empty list\n");
        return start;
    }
    node* n=(node*)malloc(sizeof(node));
    printf("Enter the element to be inserted:\n");
    scanf("%d",&n->data);
    n->next=0;
    n->previos=0;
    if(start==0)
    {
        printf("Empty list\n");
    }
    else
    {
        printf("To left of which element should %d be inserted?\n",n->data);
        int ele;
        scanf("%d",&ele);
        node *p=start;
        if(start->data==ele)
        {
            start->previos=n;
            n->next=start;
            start=n;
            return start;
        }
        while(p!=0)
        {
            if(p->data==ele)
            {
                // node*t=p->previos;
                n->next=p;
                n->previos=p->previos;
                p->previos->next=n;
                p->previos=n;
                return start;
            }
            p=p->next;
        }
        if(p==0)
        {
            printf("Not found\n");
        }
    }
    return start;
}
node *Delete_node(node *start)
{
    if(start==0)
    {
        printf("No element deleted\n");
        return start;
    }
    int ele;
    printf("Enter the node to be deleted:\n");
    scanf("%d",&ele);
    if(start->data==ele)
    {
        if(start->next==0)
        {
            free(start);
            return NULL;
        }
        start=start->next;
        start->previos=0;
        return start;
    }
    node *p=start;
    while(p!=0)
    {
        if(p->data==ele)
        {
            // printf("snio\n");
            
            node*pp=p->previos;
            node * np=p->next;
            np->previos=pp;
            pp->next=np;
            free(p);
            return start;
        }
        p=p->next;
        
    }
    if(p==0)
    {
        printf("Element not found\n");
    }
    return start;
}
void display(node *start)
{
    if(start==0)
    {
        printf("Empty list\n");
    }
    while(start!=0)
    {
        printf("%d ",start->data);
        start=start->next;
    }
    printf("\n");
    return ;
}
int main()
{
    node *start=0;
    printf("Choices:\n1-Insert\n2-Insert left\n3-Delete node\n4-Display\n5-Exit\n");
    printf("Enter your choice:\n");
    int n;
    scanf("%d",&n);
    while(1)
    {
        if(n==1)
        {
         start=insert(start);   
        }
        if(n==2)
        {
         start=insert_left(start);   
        }
        if(n==3)
        {
            start=Delete_node(start);
        }
        if(n==4)
        {
            display(start);
        }
        if(n==5)
        {
            return 0;
        }
        if(n>5)
        {
            return 0;
        }
        printf("Choices:\n1-Insert\n2-Insert left\n3-Delete node\n4-Display\n5-Exit\n");
    printf("Enter your choice:\n");
    
    scanf("%d",&n);
    }
}
_________________________________________________________________________________________________________________________________________________
i pracice 
1)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *prvious ;
    struct node * next;
};
    void display(struct node *start)
    {
        if(start==0)
        {
            printf("Empty list\n");
            return ;
        }
        printf("The elements in the doubly linked list are ");
        while(start!=0)
        {
            printf("%d ",start->data);
            start=start->next;
        }
        printf("\n");
        return ;
        
    }
    
int count =0;
int main()
{
    
    struct node *start=(struct node *)malloc(sizeof(struct node));
    printf("Enter the value\n");
    start->next=0;
    start->prvious=0;
    scanf("%d",&start->data);
    char c[3]={0};
    c[0]='Y';
    struct node *p=start;
    while(1)
    {
        printf("Do you want to add another node? Type \nYes/No\n");
        scanf("%s",c);
        if(c[0]=='Y'||c[0]=='y')
        {
             printf("Enter the value\n");
             struct node *n=(struct node *)malloc(sizeof(struct node));
             scanf("%d",&n->data);
             p->next =n;
             n->prvious=p;
             p=n;
             n->next=0;
             count++;
        }
        else 
        {
        break;
        }
    }
    display(start);
    printf("The number of nodes in the doubly linked list is %d\n",count+1);
}
_________________________________________________________________________________
2)
#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node *previous ;
    struct node *next;
};
 struct node * Delete (struct node * start,int n)
 {
     struct node *p=start;
     int ele=0;
     printf("Input the position ( %d to %d ) to delete a node\n",1,n);
    // int ele;
    scanf("%d",&ele);
    if(ele>n)
    {
        printf("Invalid position Try again \n");
        return 0;
    }
        if(ele==1)
        {
            start=start->next;
            free(start->previous);
            start->previous=0;
            return start;
        }
        for(int i=1;i<n;i++)
        {
            if(i==ele)
            {
                struct node *pp=  p->previous;
                struct node * np=p->next;
                pp->next=np;
                np->previous=pp;
                free(p);
                return start;
            }
            p=p->next;
        }
        if(ele ==n)
        {
            p->previous->next=0;
            free(p);
            
        }
        return start;
        
 }
 void display(struct node *start,int x)
 {
     if(start==0)
     {
        //  printf("empty\n ");
         return ;
     }
     int i=0;
     if(x==0)
     printf("Data entered in the list are\n");
     
     else
     printf("After deletion the new list are\n");
     while(start!=0 )
     {
         printf("node %d : %d\n",i+1,start->data);
         start=start->next;
         i++;
     }
 }
int main()
{
    int n;
    printf("Enter the number of nodes\n");
    scanf("%d",&n);
    struct node *start=(struct node *)malloc(sizeof(struct node ));
    struct node *p=start;
    if(n>0)
    {
        printf("Input data for node 1 : \n");
        scanf("%d",&start->data);
    }
    else 
    {
        // printf("List is empty\n");
    }
    for(int i=1;i<n;i++)
    {
       struct node * ne=(struct node *)malloc(sizeof(struct node));
       ne->next=0;
       ne->previous=0;
        // printf("")
         printf("Input data for node %d : \n",i+1);
         scanf("%d",&ne->data);
         p->next=ne;
         ne->previous=p;
         p=ne;
         
         
    }
    // p=start->next;
    display(start,0);
    start=Delete(start,n);
    display(start,1);
    return 0;
}
----------------------------------------------------------------------------------------------------------------------------------------------
================================================================================================================================================

