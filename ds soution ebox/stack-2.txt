i lab
1)
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
    char *a;
    int top;
    int maxSize;
};

int precedence(char c)
{
    if(c=='+'||c=='-')
    return 1;
    else if(c=='*'||c=='/')
    return 2;
    
    return 0;
    
}
int oprater(char c)
{
 if(c=='+'|| c=='-'|| c=='/'||c=='*')
 return 1;
 
 return 0;
}
void conver(char*s,int len)
{
    struct stack *x=(struct stack*)malloc(sizeof(struct stack));
    x->top=-1;
    x->maxSize=20;
    x->a=(char*)malloc(sizeof(char)*x->maxSize);
    for(int i=0;i<len;i++)
    {
     if(s[i]!='('&& s[i]!=')')
     {
         if(oprater(s[i]))
         {
             if(x->top==-1)
             {
                 x->top++;
                 x->a[x->top]=s[i];
             }
             else
             {
                 if(precedence(s[i])<=precedence(x->a[x->top]))
                 {
                     printf("%c",x->a[x->top]);
                     x->top--;
                     
                         while(x->top!=-1)
                         {
                              if(precedence(s[i])<=precedence(x->a[x->top]))
                            {
                               printf("%c",x->a[x->top]);
                               x->top--;
                             }
                             else
                             break;
                         }
                         x->top++;
                         x->a[x->top]=s[i];
                     
                 }
                 else
                 {
                     x->top++;
                     x->a[x->top]=s[i];
                 }
             }
         }
         else
         {
             printf("%c",s[i]);
         }
     }
    }
    while(x->top!=-1)
    {
        printf("%c",x->a[x->top]);
        x->top--;
    }
    return ;
}
int main()
{
    // struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    char c[20];
    
    printf("Enter an expression in infix form\n");
    scanf("%s",c);
    int len=strlen(c);
    printf("The postfix expression is ");
    conver(c,len);
    
return 0;
}
---------------------------------------------------------------------------------------------------------
2)
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
    char *a;
    int top;
    int maxSize;
};
void cheek(char *c,int n)
{
    struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    s->top=-1;
    s->maxSize=n;
    s->a=(char*)malloc(sizeof(char)*n);
    for(int i=0;i<n;i++)
    {
        if((n)%2==1 && i==n/2)
        {
            continue;
        }
        if(s->top==-1)
        {
            s->top++;
            s->a[s->top]=c[i];
        }
        else
        {
            if(s->a[s->top]==c[i])
            {
                s->top--;
            }
            else
            {
                s->top++;
                s->a[s->top]=c[i];
            }
        }
    }
    if(s->top!=-1)
    {
        printf("%s is not a palindrome\n",c);
    }
    else
    printf("%s is palindrome\n",c);
}
int main()
{
    int n;
    
	
	char c[50];
	printf("1-Enter string\n");
	printf("2-Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	
	while(n==1)
	{
	    printf("Enter the string\n");
	    scanf("%s",c);
	    int len=strlen(c);
	    cheek(c,len);
	    
	printf("1-Enter string\n");
	printf("2-Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	}
	
	return 0;
}
---------------------------------------------------------------------------------------
3)#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
    char *a;
    int top;
    int maxSize;
};
void cheek(char *c,int n)
{
    struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    s->top=-1;
    s->maxSize=n;
    s->a=(char*)malloc(sizeof(char)*n);
    for(int i=0;i<n;i++)
    {
        if((n)%2==1 && i==n/2)
        {
            continue;
        }
        if(s->top==-1)
        {
            s->top++;
            s->a[s->top]=c[i];
        }
        else
        {
            if(s->a[s->top]==c[i])
            {
                s->top--;
            }
            else
            {
                s->top++;
                s->a[s->top]=c[i];
            }
        }
    }
    if(s->top!=-1)
    {
        printf("%s is not a palindrome\n",c);
    }
    else
    printf("%s is palindrome\n",c);
}
int main()
{
    int n;
    
	
	char c[50];
	printf("1-Enter string\n");
	printf("2-Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	
	while(n==1)
	{
	    printf("Enter the string\n");
	    scanf("%s",c);
	    int len=strlen(c);
	    cheek(c,len);
	    
	printf("1-Enter string\n");
	printf("2-Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	}
	
	return 0;
}
=====================================================================================================
Stack 2 -- i-Practice
1)
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
    int *a;
    int top;
    int maxSize;
};
int result(char *c,int n)
{
    struct stack *s=(struct stack*)malloc(sizeof(struct stack));
    s->top=-1;
    s->a=(int*)malloc(sizeof(int)*20);
    s->maxSize=20;
    for(int i=0;i<n;i++)
    {
        int x=(int)c[i];
        if(x>=48 && x<=57)
        {
             x=x-48;
             s->top++;
             s->a[s->top]=x;
             
        }
        else 
        {
            int x=s->a[s->top];
                s->top--;
                int y=s->a[s->top];
            if(c[i]=='+')
            {
                s->a[s->top]=x+y;
            }
            else if(c[i]=='-')
            {
                s->a[s->top]=y-x;
            }
            else if(c[i]=='*')
            {
                s->a[s->top]=x*y;
            }
            else
            {
                
                s->a[s->top]=(y/x);
            }
        }
        // printf("%d\n",s->a[s->top]);
    }
    return s->a[s->top];
}
int main()
{
	char c[30];
	printf("Enter postfix expression\n");
	scanf("%s",c);
	int len=strlen(c);
    printf("Result is %d",result(c,len));
	
	return 0;
}
---------------------------------------------------------------------------------------------------
2)
#include<stdio.h>
// int main()
void search(int*a,int start,int end,int target);
int main()
{
	int n;
	scanf("%d",&n);
	int a[n];
	for(int i=0;i<n;i++)
	{
	    scanf("%d",&a[i]);
	    
	    
	}
	int target;
	scanf("%d",&target);
	search(a,0,n-1,target);
	
	

	return 0;
}
void search(int*a,int start,int end,int target)
{
    if(start>end)
    {
      printf("Element Not Found\n");
      return;
    }
      int mid=start+(end-start)/2;
      if(target>a[mid])
        search(a,mid+1,end,target);
       else if(target<a[mid])
       search(a,start,mid-1,target);
       else if(a[mid]==target){
       printf("Element Found\n");
       return ;
       }
}
----------------------------------------------------------------------------------------------------
3)

#include<stdio.h>
int computeNum(int n);
int main()
{
    int n;
	printf("Enter the value of n\n");
	scanf("%d",&n);
	printf("The number of digits in %d is %d\n",n, computeNum(n));
	return 0;
}

int computeNum(int n)
{
 if(n==0)
 {
     return 1;
 }
 else
 {
     if(n/10==0)
     {
        return 1;
     }
 return computeNum(n/10)+1;
 }
 return 0;
}
 