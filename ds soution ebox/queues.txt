I lab
1)
#include<stdio.h>
#include<stdlib.h>
struct queue
{
    int *arr;
    int front ;
    int rare;
    int maxSize;
}*a;
void insert()
{
    if(a->rare==a->maxSize-1)
    {
        printf("Queue Overflow\n");
        return;
    }
    if(a->front==-1)
    {
        a->front=a->rare=0;
    }
    else
    {
        a->rare++;
    }
 printf("Enter the element to be inserted :\n");
//  a->rare++;
 scanf("%d",&a->arr[a->rare]);
 
}
void Delete()
{
    if(a->front==a->rare+1)
    {
        printf("Queue Underflow\n");
        return;
    }
    // printf("\n");
    int x=a->arr[a->front];
    a->front++;
    printf("Element deleted from queue is : %d\n",x);
    
}

void Display()
{
    if(a->front==-1 || a->front>a->rare)
    {
        printf("Queue is empty\n");
        return;
    }
    printf("Elements in the Queue :\n");
    for(int i=a->front;i<=a->rare;i++)
    {
        printf("%d ",a->arr[i]);
    }
}
int main()
{
    a=(struct queue*)malloc(sizeof(struct queue));
    int n;
    a->maxSize=5;
    a->arr=(int*)malloc(sizeof(int)*a->maxSize);
    a->front=a->rare=-1;
    printf("1.Insert element to queue\n");
    printf("2.Delete element from queue\n");
    printf("3.Display all elements of queue\n");
    printf("4.Quit\n");
    printf("Enter your choice :\n");
    scanf("%d",&n);
    while(n!=4)
    {
        if(n==1)
        {
            insert();
        }
        else if(n==2)
        {
            Delete();
        }
        else
        {
            Display();
        }
        printf("1.Insert element to queue\n");
    printf("2.Delete element from queue\n");
    printf("3.Display all elements of queue\n");
    printf("4.Quit\n");
    printf("Enter your choice :\n");
    scanf("%d",&n);
        
    }
}
—---------------------------------------------------------------------------------------------------------------------------
2)
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct queue
{
    int *a ;
    struct node *front;
    struct node* rare;
}*a;
void insert()
{
    struct node *n=(struct node *)malloc(sizeof(struct node));
    n->next=0;
    printf("Enter the element to be inserted/entered\n");
    scanf("%d",&n->data);
    if(a->front==0)
    {
        a->front=n;
        a->rare=n;
        return;
    }
    a->rare->next=n;
    a->rare=n;
    return;
    
}
void delte()
{
    if(a->front==0)
    {
        printf("Queue is empty\n");
        return;
    }
    int x=a->front->data;
    if(a->front==a->rare)
    {
        printf("The deleted element is %d\n",x);
        a->front=a->rare=0;
        return;
    }
    a->front=a->front->next;
    
    
        printf("The deleted element is %d\n",x);
        // a->front=a->rare=0;
        return;
    
    
}
void display()
{
    printf("The contents of the queue are ");
    struct node *p=a->front;
    if(p==0)
    {
        printf("{}\n");
        return;
    }
    while(p->next!=0)
    {
        printf("%d ",p->data);
        p=p->next;
    }
    printf("%d",p->data);
    printf("\n");
    return ;
}

int main()
{
    int n;
    a=(struct queue*)malloc(sizeof(struct queue));
    a->rare=a->front=0;
    
    printf("Choice 1 : Enter element into Queue\n");
    printf("Choice 2 : Delete element from Queue\n");
    printf("Choice 3 : Display\n");
    printf("Any other choice : Exit\n");
    printf("Enter your choice\n");
    scanf("%d",&n);
    while(1)
    {
        if(n==1)
        {
            insert();
        }
        else if(n==2)
        {
            delte();
        }
        else if(n==3)
        {
            display();
        }
        else
        {
            return 0;
        }
        
    printf("Choice 1 : Enter element into Queue\n");
    printf("Choice 2 : Delete element from Queue\n");
    printf("Choice 3 : Display\n");
    printf("Any other choice : Exit\n");
    printf("Enter your choice\n");
    scanf("%d",&n);
    }
    return 0;
}
==================================================================
Queue -- i-Practice
1)
#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node*next;
};
struct node *front=0 ;

struct node *rare=0;

void insert()
{
    struct node *n=(struct node*)malloc(sizeof(struct node));
    scanf("%d",&n->data);
    n->next=0;
    if(front==0 && rare==0)
    {
        front=rare=n;
        return;
    }
    rare->next=n;
    rare=n;
    
    return;
    
}
void display(struct node *p,int x)
{
    if(p==0)
    {
        return ;
    }
    else if(x==0)
    {
        printf("%d\n",p->data);
        display(p->next,0);
    }
    else
    {
        display(p->next,1);
        printf("%d\n",p->data);
    }
}
void delete()
{
    if(front==0)
    {
        printf("queue underflow\n");
        return;
    }
    printf("%d\n",front->data);
    if(front==rare)
    {
        front=rare=0;
    }
    else 
    {
        front=front->next;
    }
    
    return;
}
int main()
{
    int n;
    printf("enter ur choice\n");
    printf("1.add to queue\n");
    printf("2.remove from queue\n");
    printf("3.display\n");
    printf("4.exit\n");
    scanf("%d",&n);
    while(n!=4)
    {
        if(n==1)
        {
            printf("enter the element to be added to queue\n");
            insert();
        }
        else if(n==2)
        {
            // printf("")
            delete();
        }
        else if(n==3)
        {
            static int i=0;
            i++;
            if(front==0)
            {
                printf("em\n");
            }
            else
            {
                struct node *p=front;
        display(p,i%2);
            }
        }
        else
        {
            printf("invalid\n");
        }
        
    printf("enter ur choice\n");
    printf("1.add to queue\n");
    printf("2.remove from queue\n");
    printf("3.display\n");
    printf("4.exit\n");
    scanf("%d",&n);
        
    }
    
}
—-----------------------------------------------
2)
#include<stdio.h>
#include<stdlib.h>
struct Queue
{
    char **c;
    int front;
    int rare;
    int maxSize;
}*a;
void Display()
{
    // if(abs(a->front-))
    printf("The contents of the queue are ");
    if(a->front==-1 ||(a->front>a->rare))
    {
        printf("{}\n");
        return;
    }
    if(a->rare>=a->front)
    {
        for(int i=a->front;i<=a->rare;i++)
        {
            printf("%s ",a->c[i]);
        }
    }
    else
    {
        for(int i=a->front;i<a->maxSize;i++)
        {
           printf("%s ",a->c[i]); 
        }
        for(int i=0;i<=a->rare;i++)
        {
            printf("%s ",a->c[i]);
        }
    }
    printf("\n");
}
void insert()
{
    if(a->rare+1==a->front ||(a->front==0 && a->rare==a->maxSize-1))
    {
        printf("Queue is full\n");
        return;
    }
    if(a->front==-1)
    {
        a->front=a->rare=0;
    }
    else if(a->rare==4)
    {
        a->rare=0;
    }
    else
    {
        a->rare++;
    }
    printf("Enter the string to be inserted = ");
    scanf("%s",a->c[a->rare]);
    if(a->c[a->rare][0]=='\n')
    {
        scanf("%s",a->c[a->rare]);
    }
    
    // scanf("")
    printf("\n");
    return ;
    
}
void Delete()
{
    if(a->rare==-1 && a->front==-1)
    {
        printf("Queue is empty\n");
        return ;
    }
    printf("The deleted element is %s",a->c[a->front]);
    if(a->rare==a->front)
    {
        a->rare=a->front=-1;
    }
    else if(a->front==4)
    {
        a->front=0;
    }
    else
    {
        a->front++;
    }
    return;
}
int main()
{
	
	int n;
	a=(struct Queue*)malloc(sizeof(struct Queue));
	a->maxSize=5;
	a->front=a->rare=-1;
	a->c=(char**)malloc(sizeof(char*)*5);
	for(int i=0;i<5;i++)
	{
	    a->c[i]=(char *)malloc(sizeof(char)*10);
	}
	printf("Choice 1 : Enter element into Queue\n");
	printf("Choice 2 : Delete element from Queue\n");
	printf("Choice 3 : Display\n");
	printf("Any other choice : Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	while(n!=4)
	{
	    if(n==1)
	    {
	        insert();
	    }
	    else if(n==2)
	    {
	        Delete();
	    }
	    else if(n==3)
	    {Display();
	        
	    }else
	    {
	        return 0;
	    }
	    
	printf("Choice 1 : Enter element into Queue\n");
	printf("Choice 2 : Delete element from Queue\n");
	printf("Choice 3 : Display\n");
	printf("Any other choice : Exit\n");
	printf("Enter your choice\n");
	scanf("%d",&n);
	}
	return 0;
}
==========================================================================
